import { Component, OnInit } from '@angular/core';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { JhiAlertService } from 'ng-jhipster';
import { ICategorie, Categorie } from 'app/shared/model/categorie.model';
import { CategorieService } from './categorie.service';
import { IQcm } from 'app/shared/model/qcm.model';
import { QcmService } from 'app/entities/qcm/qcm.service';

@Component({
  selector: 'jhi-categorie-update',
  templateUrl: './categorie-update.component.html'
})
export class CategorieUpdateComponent implements OnInit {
  isSaving: boolean;

  qcms: IQcm[];

  editForm = this.fb.group({
    id: [],
    code: [null, [Validators.required, Validators.minLength(1)]],
    libelle: [],
    qcmId: []
  });

  constructor(
    protected jhiAlertService: JhiAlertService,
    protected categorieService: CategorieService,
    protected qcmService: QcmService,
    protected activatedRoute: ActivatedRoute,
    private fb: FormBuilder
  ) {}

  ngOnInit() {
    this.isSaving = false;
    this.activatedRoute.data.subscribe(({ categorie }) => {
      this.updateForm(categorie);
    });
    this.qcmService
      .query()
      .pipe(
        filter((mayBeOk: HttpResponse<IQcm[]>) => mayBeOk.ok),
        map((response: HttpResponse<IQcm[]>) => response.body)
      )
      .subscribe((res: IQcm[]) => (this.qcms = res), (res: HttpErrorResponse) => this.onError(res.message));
  }

  updateForm(categorie: ICategorie) {
    this.editForm.patchValue({
      id: categorie.id,
      code: categorie.code,
      libelle: categorie.libelle,
      qcmId: categorie.qcmId
    });
  }

  previousState() {
    window.history.back();
  }

  save() {
    this.isSaving = true;
    const categorie = this.createFromForm();
    if (categorie.id !== undefined) {
      this.subscribeToSaveResponse(this.categorieService.update(categorie));
    } else {
      this.subscribeToSaveResponse(this.categorieService.create(categorie));
    }
  }

  private createFromForm(): ICategorie {
    return {
      ...new Categorie(),
      id: this.editForm.get(['id']).value,
      code: this.editForm.get(['code']).value,
      libelle: this.editForm.get(['libelle']).value,
      qcmId: this.editForm.get(['qcmId']).value
    };
  }

  protected subscribeToSaveResponse(result: Observable<HttpResponse<ICategorie>>) {
    result.subscribe(() => this.onSaveSuccess(), () => this.onSaveError());
  }

  protected onSaveSuccess() {
    this.isSaving = false;
    this.previousState();
  }

  protected onSaveError() {
    this.isSaving = false;
  }
  protected onError(errorMessage: string) {
    this.jhiAlertService.error(errorMessage, null, null);
  }

  trackQcmById(index: number, item: IQcm) {
    return item.id;
  }
}
