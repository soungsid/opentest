import { Component, OnInit } from '@angular/core';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { JhiAlertService, JhiDataUtils } from 'ng-jhipster';
import { IQcmQuestion, QcmQuestion } from 'app/shared/model/qcm-question.model';
import { QcmQuestionService } from './qcm-question.service';
import { IQcmQuestionTag } from 'app/shared/model/qcm-question-tag.model';
import { QcmQuestionTagService } from 'app/entities/qcm-question-tag/qcm-question-tag.service';
import { IQcmReponse } from 'app/shared/model/qcm-reponse.model';
import { QcmReponseService } from 'app/entities/qcm-reponse/qcm-reponse.service';
import { IQcmTestResponse } from 'app/shared/model/qcm-test-response.model';
import { QcmTestResponseService } from 'app/entities/qcm-test-response/qcm-test-response.service';

@Component({
  selector: 'jhi-qcm-question-update',
  templateUrl: './qcm-question-update.component.html'
})
export class QcmQuestionUpdateComponent implements OnInit {
  isSaving: boolean;

  qcmquestiontags: IQcmQuestionTag[];

  qcmreponses: IQcmReponse[];

  qcmtestresponses: IQcmTestResponse[];

  editForm = this.fb.group({
    id: [],
    libelle: [null, [Validators.required]],
    type: [],
    explication: [],
    qcmQuestionTagId: [],
    qcmReponseId: [],
    qcmTestResponseId: []
  });

  constructor(
    protected dataUtils: JhiDataUtils,
    protected jhiAlertService: JhiAlertService,
    protected qcmQuestionService: QcmQuestionService,
    protected qcmQuestionTagService: QcmQuestionTagService,
    protected qcmReponseService: QcmReponseService,
    protected qcmTestResponseService: QcmTestResponseService,
    protected activatedRoute: ActivatedRoute,
    private fb: FormBuilder
  ) {}

  ngOnInit() {
    this.isSaving = false;
    this.activatedRoute.data.subscribe(({ qcmQuestion }) => {
      this.updateForm(qcmQuestion);
    });
    this.qcmQuestionTagService
      .query()
      .pipe(
        filter((mayBeOk: HttpResponse<IQcmQuestionTag[]>) => mayBeOk.ok),
        map((response: HttpResponse<IQcmQuestionTag[]>) => response.body)
      )
      .subscribe((res: IQcmQuestionTag[]) => (this.qcmquestiontags = res), (res: HttpErrorResponse) => this.onError(res.message));
    this.qcmReponseService
      .query()
      .pipe(
        filter((mayBeOk: HttpResponse<IQcmReponse[]>) => mayBeOk.ok),
        map((response: HttpResponse<IQcmReponse[]>) => response.body)
      )
      .subscribe((res: IQcmReponse[]) => (this.qcmreponses = res), (res: HttpErrorResponse) => this.onError(res.message));
    this.qcmTestResponseService
      .query()
      .pipe(
        filter((mayBeOk: HttpResponse<IQcmTestResponse[]>) => mayBeOk.ok),
        map((response: HttpResponse<IQcmTestResponse[]>) => response.body)
      )
      .subscribe((res: IQcmTestResponse[]) => (this.qcmtestresponses = res), (res: HttpErrorResponse) => this.onError(res.message));
  }

  updateForm(qcmQuestion: IQcmQuestion) {
    this.editForm.patchValue({
      id: qcmQuestion.id,
      libelle: qcmQuestion.libelle,
      type: qcmQuestion.type,
      explication: qcmQuestion.explication,
      qcmQuestionTagId: qcmQuestion.qcmQuestionTagId,
      qcmReponseId: qcmQuestion.qcmReponseId,
      qcmTestResponseId: qcmQuestion.qcmTestResponseId
    });
  }

  byteSize(field) {
    return this.dataUtils.byteSize(field);
  }

  openFile(contentType, field) {
    return this.dataUtils.openFile(contentType, field);
  }

  setFileData(event, field: string, isImage) {
    return new Promise((resolve, reject) => {
      if (event && event.target && event.target.files && event.target.files[0]) {
        const file: File = event.target.files[0];
        if (isImage && !file.type.startsWith('image/')) {
          reject(`File was expected to be an image but was found to be ${file.type}`);
        } else {
          const filedContentType: string = field + 'ContentType';
          this.dataUtils.toBase64(file, base64Data => {
            this.editForm.patchValue({
              [field]: base64Data,
              [filedContentType]: file.type
            });
          });
        }
      } else {
        reject(`Base64 data was not set as file could not be extracted from passed parameter: ${event}`);
      }
    }).then(
      // eslint-disable-next-line no-console
      () => console.log('blob added'), // success
      this.onError
    );
  }

  previousState() {
    window.history.back();
  }

  save() {
    this.isSaving = true;
    const qcmQuestion = this.createFromForm();
    if (qcmQuestion.id !== undefined) {
      this.subscribeToSaveResponse(this.qcmQuestionService.update(qcmQuestion));
    } else {
      this.subscribeToSaveResponse(this.qcmQuestionService.create(qcmQuestion));
    }
  }

  private createFromForm(): IQcmQuestion {
    return {
      ...new QcmQuestion(),
      id: this.editForm.get(['id']).value,
      libelle: this.editForm.get(['libelle']).value,
      type: this.editForm.get(['type']).value,
      explication: this.editForm.get(['explication']).value,
      qcmQuestionTagId: this.editForm.get(['qcmQuestionTagId']).value,
      qcmReponseId: this.editForm.get(['qcmReponseId']).value,
      qcmTestResponseId: this.editForm.get(['qcmTestResponseId']).value
    };
  }

  protected subscribeToSaveResponse(result: Observable<HttpResponse<IQcmQuestion>>) {
    result.subscribe(() => this.onSaveSuccess(), () => this.onSaveError());
  }

  protected onSaveSuccess() {
    this.isSaving = false;
    this.previousState();
  }

  protected onSaveError() {
    this.isSaving = false;
  }
  protected onError(errorMessage: string) {
    this.jhiAlertService.error(errorMessage, null, null);
  }

  trackQcmQuestionTagById(index: number, item: IQcmQuestionTag) {
    return item.id;
  }

  trackQcmReponseById(index: number, item: IQcmReponse) {
    return item.id;
  }

  trackQcmTestResponseById(index: number, item: IQcmTestResponse) {
    return item.id;
  }
}
