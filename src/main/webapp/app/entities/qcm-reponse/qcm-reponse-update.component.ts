import { Component, OnInit, ElementRef } from '@angular/core';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { JhiAlertService, JhiDataUtils } from 'ng-jhipster';
import { IQcmReponse, QcmReponse } from 'app/shared/model/qcm-reponse.model';
import { QcmReponseService } from './qcm-reponse.service';
import { IQcmTestResponse } from 'app/shared/model/qcm-test-response.model';
import { QcmTestResponseService } from 'app/entities/qcm-test-response/qcm-test-response.service';

@Component({
  selector: 'jhi-qcm-reponse-update',
  templateUrl: './qcm-reponse-update.component.html'
})
export class QcmReponseUpdateComponent implements OnInit {
  isSaving: boolean;

  qcmtestresponses: IQcmTestResponse[];

  editForm = this.fb.group({
    id: [],
    reponseText: [],
    reponseImage: [],
    reponseImageContentType: [],
    reponseNombre: [],
    correct: [],
    poids: [],
    qcmTestResponseId: []
  });

  constructor(
    protected dataUtils: JhiDataUtils,
    protected jhiAlertService: JhiAlertService,
    protected qcmReponseService: QcmReponseService,
    protected qcmTestResponseService: QcmTestResponseService,
    protected elementRef: ElementRef,
    protected activatedRoute: ActivatedRoute,
    private fb: FormBuilder
  ) {}

  ngOnInit() {
    this.isSaving = false;
    this.activatedRoute.data.subscribe(({ qcmReponse }) => {
      this.updateForm(qcmReponse);
    });
    this.qcmTestResponseService
      .query()
      .pipe(
        filter((mayBeOk: HttpResponse<IQcmTestResponse[]>) => mayBeOk.ok),
        map((response: HttpResponse<IQcmTestResponse[]>) => response.body)
      )
      .subscribe((res: IQcmTestResponse[]) => (this.qcmtestresponses = res), (res: HttpErrorResponse) => this.onError(res.message));
  }

  updateForm(qcmReponse: IQcmReponse) {
    this.editForm.patchValue({
      id: qcmReponse.id,
      reponseText: qcmReponse.reponseText,
      reponseImage: qcmReponse.reponseImage,
      reponseImageContentType: qcmReponse.reponseImageContentType,
      reponseNombre: qcmReponse.reponseNombre,
      correct: qcmReponse.correct,
      poids: qcmReponse.poids,
      qcmTestResponseId: qcmReponse.qcmTestResponseId
    });
  }

  byteSize(field) {
    return this.dataUtils.byteSize(field);
  }

  openFile(contentType, field) {
    return this.dataUtils.openFile(contentType, field);
  }

  setFileData(event, field: string, isImage) {
    return new Promise((resolve, reject) => {
      if (event && event.target && event.target.files && event.target.files[0]) {
        const file: File = event.target.files[0];
        if (isImage && !file.type.startsWith('image/')) {
          reject(`File was expected to be an image but was found to be ${file.type}`);
        } else {
          const filedContentType: string = field + 'ContentType';
          this.dataUtils.toBase64(file, base64Data => {
            this.editForm.patchValue({
              [field]: base64Data,
              [filedContentType]: file.type
            });
          });
        }
      } else {
        reject(`Base64 data was not set as file could not be extracted from passed parameter: ${event}`);
      }
    }).then(
      // eslint-disable-next-line no-console
      () => console.log('blob added'), // success
      this.onError
    );
  }

  clearInputImage(field: string, fieldContentType: string, idInput: string) {
    this.editForm.patchValue({
      [field]: null,
      [fieldContentType]: null
    });
    if (this.elementRef && idInput && this.elementRef.nativeElement.querySelector('#' + idInput)) {
      this.elementRef.nativeElement.querySelector('#' + idInput).value = null;
    }
  }

  previousState() {
    window.history.back();
  }

  save() {
    this.isSaving = true;
    const qcmReponse = this.createFromForm();
    if (qcmReponse.id !== undefined) {
      this.subscribeToSaveResponse(this.qcmReponseService.update(qcmReponse));
    } else {
      this.subscribeToSaveResponse(this.qcmReponseService.create(qcmReponse));
    }
  }

  private createFromForm(): IQcmReponse {
    return {
      ...new QcmReponse(),
      id: this.editForm.get(['id']).value,
      reponseText: this.editForm.get(['reponseText']).value,
      reponseImageContentType: this.editForm.get(['reponseImageContentType']).value,
      reponseImage: this.editForm.get(['reponseImage']).value,
      reponseNombre: this.editForm.get(['reponseNombre']).value,
      correct: this.editForm.get(['correct']).value,
      poids: this.editForm.get(['poids']).value,
      qcmTestResponseId: this.editForm.get(['qcmTestResponseId']).value
    };
  }

  protected subscribeToSaveResponse(result: Observable<HttpResponse<IQcmReponse>>) {
    result.subscribe(() => this.onSaveSuccess(), () => this.onSaveError());
  }

  protected onSaveSuccess() {
    this.isSaving = false;
    this.previousState();
  }

  protected onSaveError() {
    this.isSaving = false;
  }
  protected onError(errorMessage: string) {
    this.jhiAlertService.error(errorMessage, null, null);
  }

  trackQcmTestResponseById(index: number, item: IQcmTestResponse) {
    return item.id;
  }
}
