// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { browser, ExpectedConditions as ec, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { QcmComponentsPage, QcmDeleteDialog, QcmUpdatePage } from './qcm.page-object';

const expect = chai.expect;

describe('Qcm e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let qcmComponentsPage: QcmComponentsPage;
  let qcmUpdatePage: QcmUpdatePage;
  let qcmDeleteDialog: QcmDeleteDialog;

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    await signInPage.autoSignInUsing('admin', 'admin');
    await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
  });

  it('should load Qcms', async () => {
    await navBarPage.goToEntity('qcm');
    qcmComponentsPage = new QcmComponentsPage();
    await browser.wait(ec.visibilityOf(qcmComponentsPage.title), 5000);
    expect(await qcmComponentsPage.getTitle()).to.eq('opentestApp.qcm.home.title');
  });

  it('should load create Qcm page', async () => {
    await qcmComponentsPage.clickOnCreateButton();
    qcmUpdatePage = new QcmUpdatePage();
    expect(await qcmUpdatePage.getPageTitle()).to.eq('opentestApp.qcm.home.createOrEditLabel');
    await qcmUpdatePage.cancel();
  });

  it('should create and save Qcms', async () => {
    const nbButtonsBeforeCreate = await qcmComponentsPage.countDeleteButtons();

    await qcmComponentsPage.clickOnCreateButton();
    await promise.all([
      qcmUpdatePage.setNameInput('name'),
      qcmUpdatePage.setNbQuestionInput('5'),
      qcmUpdatePage.qcmQuestionSelectLastOption(),
      qcmUpdatePage.qcmTestSelectLastOption()
    ]);
    expect(await qcmUpdatePage.getNameInput()).to.eq('name', 'Expected Name value to be equals to name');
    expect(await qcmUpdatePage.getNbQuestionInput()).to.eq('5', 'Expected nbQuestion value to be equals to 5');
    const selectedPrivee = qcmUpdatePage.getPriveeInput();
    if (await selectedPrivee.isSelected()) {
      await qcmUpdatePage.getPriveeInput().click();
      expect(await qcmUpdatePage.getPriveeInput().isSelected(), 'Expected privee not to be selected').to.be.false;
    } else {
      await qcmUpdatePage.getPriveeInput().click();
      expect(await qcmUpdatePage.getPriveeInput().isSelected(), 'Expected privee to be selected').to.be.true;
    }
    await qcmUpdatePage.save();
    expect(await qcmUpdatePage.getSaveButton().isPresent(), 'Expected save button disappear').to.be.false;

    expect(await qcmComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeCreate + 1, 'Expected one more entry in the table');
  });

  it('should delete last Qcm', async () => {
    const nbButtonsBeforeDelete = await qcmComponentsPage.countDeleteButtons();
    await qcmComponentsPage.clickOnLastDeleteButton();

    qcmDeleteDialog = new QcmDeleteDialog();
    expect(await qcmDeleteDialog.getDialogTitle()).to.eq('opentestApp.qcm.delete.question');
    await qcmDeleteDialog.clickOnConfirmButton();

    expect(await qcmComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);
  });

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
