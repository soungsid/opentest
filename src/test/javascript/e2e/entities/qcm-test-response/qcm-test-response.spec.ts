import { browser, ExpectedConditions as ec, protractor, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

import { QcmTestResponseComponentsPage, QcmTestResponseDeleteDialog, QcmTestResponseUpdatePage } from './qcm-test-response.page-object';

const expect = chai.expect;

describe('QcmTestResponse e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let qcmTestResponseComponentsPage: QcmTestResponseComponentsPage;
  let qcmTestResponseUpdatePage: QcmTestResponseUpdatePage;
  let qcmTestResponseDeleteDialog: QcmTestResponseDeleteDialog;

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    await signInPage.autoSignInUsing('admin', 'admin');
    await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
  });

  it('should load QcmTestResponses', async () => {
    await navBarPage.goToEntity('qcm-test-response');
    qcmTestResponseComponentsPage = new QcmTestResponseComponentsPage();
    await browser.wait(ec.visibilityOf(qcmTestResponseComponentsPage.title), 5000);
    expect(await qcmTestResponseComponentsPage.getTitle()).to.eq('opentestApp.qcmTestResponse.home.title');
    await browser.wait(
      ec.or(ec.visibilityOf(qcmTestResponseComponentsPage.entities), ec.visibilityOf(qcmTestResponseComponentsPage.noResult)),
      1000
    );
  });

  it('should load create QcmTestResponse page', async () => {
    await qcmTestResponseComponentsPage.clickOnCreateButton();
    qcmTestResponseUpdatePage = new QcmTestResponseUpdatePage();
    expect(await qcmTestResponseUpdatePage.getPageTitle()).to.eq('opentestApp.qcmTestResponse.home.createOrEditLabel');
    await qcmTestResponseUpdatePage.cancel();
  });

  it('should create and save QcmTestResponses', async () => {
    const nbButtonsBeforeCreate = await qcmTestResponseComponentsPage.countDeleteButtons();

    await qcmTestResponseComponentsPage.clickOnCreateButton();

    await promise.all([qcmTestResponseUpdatePage.setDateSoumissionInput('01/01/2001' + protractor.Key.TAB + '02:30AM')]);

    expect(await qcmTestResponseUpdatePage.getDateSoumissionInput()).to.contain(
      '2001-01-01T02:30',
      'Expected dateSoumission value to be equals to 2000-12-31'
    );

    await qcmTestResponseUpdatePage.save();
    expect(await qcmTestResponseUpdatePage.getSaveButton().isPresent(), 'Expected save button disappear').to.be.false;

    expect(await qcmTestResponseComponentsPage.countDeleteButtons()).to.eq(
      nbButtonsBeforeCreate + 1,
      'Expected one more entry in the table'
    );
  });

  it('should delete last QcmTestResponse', async () => {
    const nbButtonsBeforeDelete = await qcmTestResponseComponentsPage.countDeleteButtons();
    await qcmTestResponseComponentsPage.clickOnLastDeleteButton();

    qcmTestResponseDeleteDialog = new QcmTestResponseDeleteDialog();
    expect(await qcmTestResponseDeleteDialog.getDialogTitle()).to.eq('opentestApp.qcmTestResponse.delete.question');
    await qcmTestResponseDeleteDialog.clickOnConfirmButton();

    expect(await qcmTestResponseComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);
  });

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
