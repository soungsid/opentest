import { browser, ExpectedConditions as ec, protractor, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

import { QcmTestComponentsPage, QcmTestDeleteDialog, QcmTestUpdatePage } from './qcm-test.page-object';

const expect = chai.expect;

describe('QcmTest e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let qcmTestComponentsPage: QcmTestComponentsPage;
  let qcmTestUpdatePage: QcmTestUpdatePage;
  let qcmTestDeleteDialog: QcmTestDeleteDialog;

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    await signInPage.autoSignInUsing('admin', 'admin');
    await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
  });

  it('should load QcmTests', async () => {
    await navBarPage.goToEntity('qcm-test');
    qcmTestComponentsPage = new QcmTestComponentsPage();
    await browser.wait(ec.visibilityOf(qcmTestComponentsPage.title), 5000);
    expect(await qcmTestComponentsPage.getTitle()).to.eq('opentestApp.qcmTest.home.title');
    await browser.wait(ec.or(ec.visibilityOf(qcmTestComponentsPage.entities), ec.visibilityOf(qcmTestComponentsPage.noResult)), 1000);
  });

  it('should load create QcmTest page', async () => {
    await qcmTestComponentsPage.clickOnCreateButton();
    qcmTestUpdatePage = new QcmTestUpdatePage();
    expect(await qcmTestUpdatePage.getPageTitle()).to.eq('opentestApp.qcmTest.home.createOrEditLabel');
    await qcmTestUpdatePage.cancel();
  });

  it('should create and save QcmTests', async () => {
    const nbButtonsBeforeCreate = await qcmTestComponentsPage.countDeleteButtons();

    await qcmTestComponentsPage.clickOnCreateButton();

    await promise.all([
      qcmTestUpdatePage.setDateDebutInput('01/01/2001' + protractor.Key.TAB + '02:30AM'),
      qcmTestUpdatePage.setDateFinInput('01/01/2001' + protractor.Key.TAB + '02:30AM'),
      qcmTestUpdatePage.setEmailInput('email'),
      qcmTestUpdatePage.setScoreInput('5'),
      qcmTestUpdatePage.setHighScoreInput('5'),
      qcmTestUpdatePage.qcmTestResponseSelectLastOption()
    ]);

    expect(await qcmTestUpdatePage.getDateDebutInput()).to.contain(
      '2001-01-01T02:30',
      'Expected dateDebut value to be equals to 2000-12-31'
    );
    expect(await qcmTestUpdatePage.getDateFinInput()).to.contain('2001-01-01T02:30', 'Expected dateFin value to be equals to 2000-12-31');
    expect(await qcmTestUpdatePage.getEmailInput()).to.eq('email', 'Expected Email value to be equals to email');
    expect(await qcmTestUpdatePage.getScoreInput()).to.eq('5', 'Expected score value to be equals to 5');
    expect(await qcmTestUpdatePage.getHighScoreInput()).to.eq('5', 'Expected highScore value to be equals to 5');

    await qcmTestUpdatePage.save();
    expect(await qcmTestUpdatePage.getSaveButton().isPresent(), 'Expected save button disappear').to.be.false;

    expect(await qcmTestComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeCreate + 1, 'Expected one more entry in the table');
  });

  it('should delete last QcmTest', async () => {
    const nbButtonsBeforeDelete = await qcmTestComponentsPage.countDeleteButtons();
    await qcmTestComponentsPage.clickOnLastDeleteButton();

    qcmTestDeleteDialog = new QcmTestDeleteDialog();
    expect(await qcmTestDeleteDialog.getDialogTitle()).to.eq('opentestApp.qcmTest.delete.question');
    await qcmTestDeleteDialog.clickOnConfirmButton();

    expect(await qcmTestComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);
  });

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
