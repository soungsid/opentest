import { browser, ExpectedConditions as ec, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

import { QcmQuestionComponentsPage, QcmQuestionDeleteDialog, QcmQuestionUpdatePage } from './qcm-question.page-object';

const expect = chai.expect;

describe('QcmQuestion e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let qcmQuestionComponentsPage: QcmQuestionComponentsPage;
  let qcmQuestionUpdatePage: QcmQuestionUpdatePage;
  let qcmQuestionDeleteDialog: QcmQuestionDeleteDialog;

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    await signInPage.autoSignInUsing('admin', 'admin');
    await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
  });

  it('should load QcmQuestions', async () => {
    await navBarPage.goToEntity('qcm-question');
    qcmQuestionComponentsPage = new QcmQuestionComponentsPage();
    await browser.wait(ec.visibilityOf(qcmQuestionComponentsPage.title), 5000);
    expect(await qcmQuestionComponentsPage.getTitle()).to.eq('opentestApp.qcmQuestion.home.title');
    await browser.wait(
      ec.or(ec.visibilityOf(qcmQuestionComponentsPage.entities), ec.visibilityOf(qcmQuestionComponentsPage.noResult)),
      1000
    );
  });

  it('should load create QcmQuestion page', async () => {
    await qcmQuestionComponentsPage.clickOnCreateButton();
    qcmQuestionUpdatePage = new QcmQuestionUpdatePage();
    expect(await qcmQuestionUpdatePage.getPageTitle()).to.eq('opentestApp.qcmQuestion.home.createOrEditLabel');
    await qcmQuestionUpdatePage.cancel();
  });

  it('should create and save QcmQuestions', async () => {
    const nbButtonsBeforeCreate = await qcmQuestionComponentsPage.countDeleteButtons();

    await qcmQuestionComponentsPage.clickOnCreateButton();

    await promise.all([
      qcmQuestionUpdatePage.setLibelleInput('libelle'),
      qcmQuestionUpdatePage.typeSelectLastOption(),
      qcmQuestionUpdatePage.setExplicationInput('explication'),
      qcmQuestionUpdatePage.qcmQuestionTagSelectLastOption(),
      qcmQuestionUpdatePage.qcmReponseSelectLastOption(),
      qcmQuestionUpdatePage.qcmTestResponseSelectLastOption()
    ]);

    expect(await qcmQuestionUpdatePage.getLibelleInput()).to.eq('libelle', 'Expected Libelle value to be equals to libelle');
    expect(await qcmQuestionUpdatePage.getExplicationInput()).to.eq(
      'explication',
      'Expected Explication value to be equals to explication'
    );

    await qcmQuestionUpdatePage.save();
    expect(await qcmQuestionUpdatePage.getSaveButton().isPresent(), 'Expected save button disappear').to.be.false;

    expect(await qcmQuestionComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeCreate + 1, 'Expected one more entry in the table');
  });

  it('should delete last QcmQuestion', async () => {
    const nbButtonsBeforeDelete = await qcmQuestionComponentsPage.countDeleteButtons();
    await qcmQuestionComponentsPage.clickOnLastDeleteButton();

    qcmQuestionDeleteDialog = new QcmQuestionDeleteDialog();
    expect(await qcmQuestionDeleteDialog.getDialogTitle()).to.eq('opentestApp.qcmQuestion.delete.question');
    await qcmQuestionDeleteDialog.clickOnConfirmButton();

    expect(await qcmQuestionComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);
  });

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
