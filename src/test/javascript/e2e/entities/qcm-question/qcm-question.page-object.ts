import { element, by, ElementFinder } from 'protractor';

export class QcmQuestionComponentsPage {
  createButton = element(by.id('jh-create-entity'));
  deleteButtons = element.all(by.css('jhi-qcm-question div table .btn-danger'));
  title = element.all(by.css('jhi-qcm-question div h2#page-heading span')).first();

  async clickOnCreateButton(timeout?: number) {
    await this.createButton.click();
  }

  async clickOnLastDeleteButton(timeout?: number) {
    await this.deleteButtons.last().click();
  }

  async countDeleteButtons() {
    return this.deleteButtons.count();
  }

  async getTitle() {
    return this.title.getAttribute('jhiTranslate');
  }
}

export class QcmQuestionUpdatePage {
  pageTitle = element(by.id('jhi-qcm-question-heading'));
  saveButton = element(by.id('save-entity'));
  cancelButton = element(by.id('cancel-save'));
  libelleInput = element(by.id('field_libelle'));
  typeSelect = element(by.id('field_type'));
  explicationInput = element(by.id('field_explication'));
  qcmQuestionTagSelect = element(by.id('field_qcmQuestionTag'));
  qcmReponseSelect = element(by.id('field_qcmReponse'));
  qcmTestResponseSelect = element(by.id('field_qcmTestResponse'));

  async getPageTitle() {
    return this.pageTitle.getAttribute('jhiTranslate');
  }

  async setLibelleInput(libelle) {
    await this.libelleInput.sendKeys(libelle);
  }

  async getLibelleInput() {
    return await this.libelleInput.getAttribute('value');
  }

  async setTypeSelect(type) {
    await this.typeSelect.sendKeys(type);
  }

  async getTypeSelect() {
    return await this.typeSelect.element(by.css('option:checked')).getText();
  }

  async typeSelectLastOption(timeout?: number) {
    await this.typeSelect
      .all(by.tagName('option'))
      .last()
      .click();
  }

  async setExplicationInput(explication) {
    await this.explicationInput.sendKeys(explication);
  }

  async getExplicationInput() {
    return await this.explicationInput.getAttribute('value');
  }

  async qcmQuestionTagSelectLastOption(timeout?: number) {
    await this.qcmQuestionTagSelect
      .all(by.tagName('option'))
      .last()
      .click();
  }

  async qcmQuestionTagSelectOption(option) {
    await this.qcmQuestionTagSelect.sendKeys(option);
  }

  getQcmQuestionTagSelect(): ElementFinder {
    return this.qcmQuestionTagSelect;
  }

  async getQcmQuestionTagSelectedOption() {
    return await this.qcmQuestionTagSelect.element(by.css('option:checked')).getText();
  }

  async qcmReponseSelectLastOption(timeout?: number) {
    await this.qcmReponseSelect
      .all(by.tagName('option'))
      .last()
      .click();
  }

  async qcmReponseSelectOption(option) {
    await this.qcmReponseSelect.sendKeys(option);
  }

  getQcmReponseSelect(): ElementFinder {
    return this.qcmReponseSelect;
  }

  async getQcmReponseSelectedOption() {
    return await this.qcmReponseSelect.element(by.css('option:checked')).getText();
  }

  async qcmTestResponseSelectLastOption(timeout?: number) {
    await this.qcmTestResponseSelect
      .all(by.tagName('option'))
      .last()
      .click();
  }

  async qcmTestResponseSelectOption(option) {
    await this.qcmTestResponseSelect.sendKeys(option);
  }

  getQcmTestResponseSelect(): ElementFinder {
    return this.qcmTestResponseSelect;
  }

  async getQcmTestResponseSelectedOption() {
    return await this.qcmTestResponseSelect.element(by.css('option:checked')).getText();
  }

  async save(timeout?: number) {
    await this.saveButton.click();
  }

  async cancel(timeout?: number) {
    await this.cancelButton.click();
  }

  getSaveButton(): ElementFinder {
    return this.saveButton;
  }
}

export class QcmQuestionDeleteDialog {
  private dialogTitle = element(by.id('jhi-delete-qcmQuestion-heading'));
  private confirmButton = element(by.id('jhi-confirm-delete-qcmQuestion'));

  async getDialogTitle() {
    return this.dialogTitle.getAttribute('jhiTranslate');
  }

  async clickOnConfirmButton(timeout?: number) {
    await this.confirmButton.click();
  }
}
