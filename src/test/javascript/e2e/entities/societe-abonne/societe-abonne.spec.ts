// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { browser, ExpectedConditions as ec, protractor, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { SocieteAbonneComponentsPage, SocieteAbonneDeleteDialog, SocieteAbonneUpdatePage } from './societe-abonne.page-object';
import * as path from 'path';

const expect = chai.expect;

describe('SocieteAbonne e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let societeAbonneComponentsPage: SocieteAbonneComponentsPage;
  let societeAbonneUpdatePage: SocieteAbonneUpdatePage;
  let societeAbonneDeleteDialog: SocieteAbonneDeleteDialog;
  const fileNameToUpload = 'logo-jhipster.png';
  const fileToUpload = '../../../../../../src/main/webapp/content/images/' + fileNameToUpload;
  const absolutePath = path.resolve(__dirname, fileToUpload);

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    await signInPage.autoSignInUsing('admin', 'admin');
    await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
  });

  it('should load SocieteAbonnes', async () => {
    await navBarPage.goToEntity('societe-abonne');
    societeAbonneComponentsPage = new SocieteAbonneComponentsPage();
    await browser.wait(ec.visibilityOf(societeAbonneComponentsPage.title), 5000);
    expect(await societeAbonneComponentsPage.getTitle()).to.eq('opentestApp.societeAbonne.home.title');
  });

  it('should load create SocieteAbonne page', async () => {
    await societeAbonneComponentsPage.clickOnCreateButton();
    societeAbonneUpdatePage = new SocieteAbonneUpdatePage();
    expect(await societeAbonneUpdatePage.getPageTitle()).to.eq('opentestApp.societeAbonne.home.createOrEditLabel');
    await societeAbonneUpdatePage.cancel();
  });

  it('should create and save SocieteAbonnes', async () => {
    const nbButtonsBeforeCreate = await societeAbonneComponentsPage.countDeleteButtons();

    await societeAbonneComponentsPage.clickOnCreateButton();
    await promise.all([
      societeAbonneUpdatePage.setNameInput('name'),
      societeAbonneUpdatePage.setDateAbonnementInput('01/01/2001' + protractor.Key.TAB + '02:30AM'),
      societeAbonneUpdatePage.setLogoInput(absolutePath),
      societeAbonneUpdatePage.utilisateurSelectLastOption()
    ]);
    expect(await societeAbonneUpdatePage.getNameInput()).to.eq('name', 'Expected Name value to be equals to name');
    expect(await societeAbonneUpdatePage.getDateAbonnementInput()).to.contain(
      '2001-01-01T02:30',
      'Expected dateAbonnement value to be equals to 2000-12-31'
    );
    expect(await societeAbonneUpdatePage.getLogoInput()).to.endsWith(
      fileNameToUpload,
      'Expected Logo value to be end with ' + fileNameToUpload
    );
    await societeAbonneUpdatePage.save();
    expect(await societeAbonneUpdatePage.getSaveButton().isPresent(), 'Expected save button disappear').to.be.false;

    expect(await societeAbonneComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeCreate + 1, 'Expected one more entry in the table');
  });

  it('should delete last SocieteAbonne', async () => {
    const nbButtonsBeforeDelete = await societeAbonneComponentsPage.countDeleteButtons();
    await societeAbonneComponentsPage.clickOnLastDeleteButton();

    societeAbonneDeleteDialog = new SocieteAbonneDeleteDialog();
    expect(await societeAbonneDeleteDialog.getDialogTitle()).to.eq('opentestApp.societeAbonne.delete.question');
    await societeAbonneDeleteDialog.clickOnConfirmButton();

    expect(await societeAbonneComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);
  });

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
