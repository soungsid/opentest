// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { browser, ExpectedConditions as ec, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { QcmReponseComponentsPage, QcmReponseDeleteDialog, QcmReponseUpdatePage } from './qcm-reponse.page-object';
import * as path from 'path';

const expect = chai.expect;

describe('QcmReponse e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let qcmReponseComponentsPage: QcmReponseComponentsPage;
  let qcmReponseUpdatePage: QcmReponseUpdatePage;
  let qcmReponseDeleteDialog: QcmReponseDeleteDialog;
  const fileNameToUpload = 'logo-jhipster.png';
  const fileToUpload = '../../../../../../src/main/webapp/content/images/' + fileNameToUpload;
  const absolutePath = path.resolve(__dirname, fileToUpload);

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    await signInPage.autoSignInUsing('admin', 'admin');
    await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
  });

  it('should load QcmReponses', async () => {
    await navBarPage.goToEntity('qcm-reponse');
    qcmReponseComponentsPage = new QcmReponseComponentsPage();
    await browser.wait(ec.visibilityOf(qcmReponseComponentsPage.title), 5000);
    expect(await qcmReponseComponentsPage.getTitle()).to.eq('opentestApp.qcmReponse.home.title');
  });

  it('should load create QcmReponse page', async () => {
    await qcmReponseComponentsPage.clickOnCreateButton();
    qcmReponseUpdatePage = new QcmReponseUpdatePage();
    expect(await qcmReponseUpdatePage.getPageTitle()).to.eq('opentestApp.qcmReponse.home.createOrEditLabel');
    await qcmReponseUpdatePage.cancel();
  });

  it('should create and save QcmReponses', async () => {
    const nbButtonsBeforeCreate = await qcmReponseComponentsPage.countDeleteButtons();

    await qcmReponseComponentsPage.clickOnCreateButton();
    await promise.all([
      qcmReponseUpdatePage.setReponseTextInput('reponseText'),
      qcmReponseUpdatePage.setReponseImageInput(absolutePath),
      qcmReponseUpdatePage.setReponseNombreInput('5'),
      qcmReponseUpdatePage.setPoidsInput('5'),
      qcmReponseUpdatePage.qcmTestResponseSelectLastOption()
    ]);
    expect(await qcmReponseUpdatePage.getReponseTextInput()).to.eq('reponseText', 'Expected ReponseText value to be equals to reponseText');
    expect(await qcmReponseUpdatePage.getReponseImageInput()).to.endsWith(
      fileNameToUpload,
      'Expected ReponseImage value to be end with ' + fileNameToUpload
    );
    expect(await qcmReponseUpdatePage.getReponseNombreInput()).to.eq('5', 'Expected reponseNombre value to be equals to 5');
    const selectedCorrect = qcmReponseUpdatePage.getCorrectInput();
    if (await selectedCorrect.isSelected()) {
      await qcmReponseUpdatePage.getCorrectInput().click();
      expect(await qcmReponseUpdatePage.getCorrectInput().isSelected(), 'Expected correct not to be selected').to.be.false;
    } else {
      await qcmReponseUpdatePage.getCorrectInput().click();
      expect(await qcmReponseUpdatePage.getCorrectInput().isSelected(), 'Expected correct to be selected').to.be.true;
    }
    expect(await qcmReponseUpdatePage.getPoidsInput()).to.eq('5', 'Expected poids value to be equals to 5');
    await qcmReponseUpdatePage.save();
    expect(await qcmReponseUpdatePage.getSaveButton().isPresent(), 'Expected save button disappear').to.be.false;

    expect(await qcmReponseComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeCreate + 1, 'Expected one more entry in the table');
  });

  it('should delete last QcmReponse', async () => {
    const nbButtonsBeforeDelete = await qcmReponseComponentsPage.countDeleteButtons();
    await qcmReponseComponentsPage.clickOnLastDeleteButton();

    qcmReponseDeleteDialog = new QcmReponseDeleteDialog();
    expect(await qcmReponseDeleteDialog.getDialogTitle()).to.eq('opentestApp.qcmReponse.delete.question');
    await qcmReponseDeleteDialog.clickOnConfirmButton();

    expect(await qcmReponseComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);
  });

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
