import { browser, ExpectedConditions as ec, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

import { CarnetAdresseComponentsPage, CarnetAdresseDeleteDialog, CarnetAdresseUpdatePage } from './carnet-adresse.page-object';

const expect = chai.expect;

describe('CarnetAdresse e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let carnetAdresseComponentsPage: CarnetAdresseComponentsPage;
  let carnetAdresseUpdatePage: CarnetAdresseUpdatePage;
  let carnetAdresseDeleteDialog: CarnetAdresseDeleteDialog;

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    await signInPage.autoSignInUsing('admin', 'admin');
    await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
  });

  it('should load CarnetAdresses', async () => {
    await navBarPage.goToEntity('carnet-adresse');
    carnetAdresseComponentsPage = new CarnetAdresseComponentsPage();
    await browser.wait(ec.visibilityOf(carnetAdresseComponentsPage.title), 5000);
    expect(await carnetAdresseComponentsPage.getTitle()).to.eq('opentestApp.carnetAdresse.home.title');
    await browser.wait(
      ec.or(ec.visibilityOf(carnetAdresseComponentsPage.entities), ec.visibilityOf(carnetAdresseComponentsPage.noResult)),
      1000
    );
  });

  it('should load create CarnetAdresse page', async () => {
    await carnetAdresseComponentsPage.clickOnCreateButton();
    carnetAdresseUpdatePage = new CarnetAdresseUpdatePage();
    expect(await carnetAdresseUpdatePage.getPageTitle()).to.eq('opentestApp.carnetAdresse.home.createOrEditLabel');
    await carnetAdresseUpdatePage.cancel();
  });

  it('should create and save CarnetAdresses', async () => {
    const nbButtonsBeforeCreate = await carnetAdresseComponentsPage.countDeleteButtons();

    await carnetAdresseComponentsPage.clickOnCreateButton();

    await promise.all([
      carnetAdresseUpdatePage.setLastnameInput('lastname'),
      carnetAdresseUpdatePage.setFirstnameInput('firstname'),
      carnetAdresseUpdatePage.setEmailInput('email')
    ]);

    expect(await carnetAdresseUpdatePage.getLastnameInput()).to.eq('lastname', 'Expected Lastname value to be equals to lastname');
    expect(await carnetAdresseUpdatePage.getFirstnameInput()).to.eq('firstname', 'Expected Firstname value to be equals to firstname');
    expect(await carnetAdresseUpdatePage.getEmailInput()).to.eq('email', 'Expected Email value to be equals to email');

    await carnetAdresseUpdatePage.save();
    expect(await carnetAdresseUpdatePage.getSaveButton().isPresent(), 'Expected save button disappear').to.be.false;

    expect(await carnetAdresseComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeCreate + 1, 'Expected one more entry in the table');
  });

  it('should delete last CarnetAdresse', async () => {
    const nbButtonsBeforeDelete = await carnetAdresseComponentsPage.countDeleteButtons();
    await carnetAdresseComponentsPage.clickOnLastDeleteButton();

    carnetAdresseDeleteDialog = new CarnetAdresseDeleteDialog();
    expect(await carnetAdresseDeleteDialog.getDialogTitle()).to.eq('opentestApp.carnetAdresse.delete.question');
    await carnetAdresseDeleteDialog.clickOnConfirmButton();

    expect(await carnetAdresseComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);
  });

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
