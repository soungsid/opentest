// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { browser, ExpectedConditions as ec, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { QcmQuestionTagComponentsPage, QcmQuestionTagDeleteDialog, QcmQuestionTagUpdatePage } from './qcm-question-tag.page-object';

const expect = chai.expect;

describe('QcmQuestionTag e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let qcmQuestionTagComponentsPage: QcmQuestionTagComponentsPage;
  let qcmQuestionTagUpdatePage: QcmQuestionTagUpdatePage;
  let qcmQuestionTagDeleteDialog: QcmQuestionTagDeleteDialog;

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    await signInPage.autoSignInUsing('admin', 'admin');
    await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
  });

  it('should load QcmQuestionTags', async () => {
    await navBarPage.goToEntity('qcm-question-tag');
    qcmQuestionTagComponentsPage = new QcmQuestionTagComponentsPage();
    await browser.wait(ec.visibilityOf(qcmQuestionTagComponentsPage.title), 5000);
    expect(await qcmQuestionTagComponentsPage.getTitle()).to.eq('opentestApp.qcmQuestionTag.home.title');
  });

  it('should load create QcmQuestionTag page', async () => {
    await qcmQuestionTagComponentsPage.clickOnCreateButton();
    qcmQuestionTagUpdatePage = new QcmQuestionTagUpdatePage();
    expect(await qcmQuestionTagUpdatePage.getPageTitle()).to.eq('opentestApp.qcmQuestionTag.home.createOrEditLabel');
    await qcmQuestionTagUpdatePage.cancel();
  });

  it('should create and save QcmQuestionTags', async () => {
    const nbButtonsBeforeCreate = await qcmQuestionTagComponentsPage.countDeleteButtons();

    await qcmQuestionTagComponentsPage.clickOnCreateButton();
    await promise.all([]);
    await qcmQuestionTagUpdatePage.save();
    expect(await qcmQuestionTagUpdatePage.getSaveButton().isPresent(), 'Expected save button disappear').to.be.false;

    expect(await qcmQuestionTagComponentsPage.countDeleteButtons()).to.eq(
      nbButtonsBeforeCreate + 1,
      'Expected one more entry in the table'
    );
  });

  it('should delete last QcmQuestionTag', async () => {
    const nbButtonsBeforeDelete = await qcmQuestionTagComponentsPage.countDeleteButtons();
    await qcmQuestionTagComponentsPage.clickOnLastDeleteButton();

    qcmQuestionTagDeleteDialog = new QcmQuestionTagDeleteDialog();
    expect(await qcmQuestionTagDeleteDialog.getDialogTitle()).to.eq('opentestApp.qcmQuestionTag.delete.question');
    await qcmQuestionTagDeleteDialog.clickOnConfirmButton();

    expect(await qcmQuestionTagComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);
  });

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
